# Generated by Django 3.2.25 on 2025-05-16 16:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('warehouse', '0011_auto_20250515_1806'),
        ('inventory', '0009_stockdiscrepancy'),
    ]

    operations = [
        migrations.CreateModel(
            name='ErpStockCheckItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('erp_warehouse_name_raw', models.CharField(blank=True, help_text='Warehouse name as it appeared in the ERP file.', max_length=255, null=True)),
                ('erp_product_sku_raw', models.CharField(blank=True, help_text='Product SKU as it appeared in the ERP file.', max_length=100, null=True)),
                ('erp_product_code_raw', models.CharField(blank=True, help_text='Warehouse Product Code as it appeared in the ERP file (if used for matching).', max_length=100, null=True)),
                ('erp_quantity', models.IntegerField(help_text='Quantity of this product in the ERP system.')),
                ('is_matched', models.BooleanField(default=False, help_text='Was this ERP item successfully matched to a WarehouseProduct in your system?')),
                ('processing_comments', models.CharField(blank=True, help_text="Comments from the matching/processing stage, e.g., 'New item not in system'.", max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'ERP Stock Check Item',
                'verbose_name_plural': 'ERP Stock Check Items',
                'ordering': ['session', 'warehouse_product__product__name'],
            },
        ),
        migrations.CreateModel(
            name='ErpStockCheckSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., ERP Quantity Snapshot - 2025-05-16', max_length=255)),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp when the ERP data file was uploaded.')),
                ('processed_at', models.DateTimeField(blank=True, help_text='Timestamp when the uploaded file was successfully processed into ErpStockCheckItems.', null=True)),
                ('evaluated_at', models.DateTimeField(blank=True, help_text='Timestamp when the evaluation was completed.', null=True)),
                ('status', models.CharField(choices=[('PENDING_UPLOAD', 'Pending Upload'), ('PROCESSING', 'Processing Uploaded File'), ('UPLOAD_FAILED', 'Upload Failed'), ('PENDING_EVALUATION', 'Pending Evaluation'), ('EVALUATING', 'Evaluating Discrepancies'), ('EVALUATED', 'Evaluated'), ('CLOSED', 'Closed/Archived')], default='PENDING_UPLOAD', help_text='Current status of this ERP stock check session.', max_length=30)),
                ('source_file_name', models.CharField(blank=True, help_text='Original name of the uploaded ERP file.', max_length=255, null=True)),
                ('processing_notes', models.TextField(blank=True, help_text='Notes or errors from file processing stage.')),
                ('evaluation_notes', models.TextField(blank=True, help_text='General notes from the evaluation stage.')),
                ('evaluated_by', models.ForeignKey(blank=True, help_text='User who initiated the evaluation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='erp_stock_checks_evaluated', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded the ERP data file.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='erp_stock_checks_uploaded', to=settings.AUTH_USER_MODEL)),
                ('warehouse', models.ForeignKey(blank=True, help_text='Specific warehouse for this check, or leave blank for all applicable warehouses in the file.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='warehouse.warehouse')),
            ],
            options={
                'verbose_name': 'ERP Stock Check Session',
                'verbose_name_plural': 'ERP Stock Check Sessions',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AlterField(
            model_name='stocktakeitem',
            name='location_label_counted',
            field=models.CharField(blank=True, help_text='The physical location label where the item was found and counted (e.g., -01).', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='stocktakesession',
            name='status',
            field=models.CharField(choices=[('PENDING', 'Pending Operator Input'), ('COMPLETED_BY_OPERATOR', 'Completed'), ('EVALUATED', 'Evaluated by Superuser'), ('CLOSED', 'Closed/Archived')], default='PENDING', help_text='Current status of the stock take session.', max_length=30),
        ),
        migrations.CreateModel(
            name='WarehouseProductDiscrepancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_quantity', models.IntegerField(help_text='Quantity as per your system (WarehouseProduct.quantity) at time of evaluation.')),
                ('erp_quantity', models.IntegerField(blank=True, help_text='Quantity as per ERP system records from the uploaded file.', null=True)),
                ('discrepancy_quantity', models.IntegerField(help_text='Difference: system_quantity - erp_quantity. Positive if your system has more, negative if less.')),
                ('discrepancy_type', models.CharField(choices=[('MATCH', 'Match'), ('OVER_IN_SYSTEM', 'Over in Your System'), ('SHORT_IN_SYSTEM', 'Short in Your System'), ('NOT_IN_ERP', 'Not in ERP'), ('NOT_IN_SYSTEM', 'Not in Your System')], help_text='Type of discrepancy found.', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Notes explaining the discrepancy or actions to be taken.')),
                ('is_resolved', models.BooleanField(default=False, help_text='Has this discrepancy been addressed/resolved?')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes on how the discrepancy was resolved.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('erp_stock_check_item', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='discrepancy_record', to='inventory.erpstockcheckitem')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wp_discrepancies_resolved', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(help_text='The ERP stock check session this discrepancy belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='discrepancies', to='inventory.erpstockchecksession')),
                ('warehouse_product', models.ForeignKey(help_text='The Warehouse Product this discrepancy relates to.', on_delete=django.db.models.deletion.PROTECT, to='warehouse.warehouseproduct')),
            ],
            options={
                'verbose_name': 'Warehouse Product Stock Discrepancy',
                'verbose_name_plural': 'Warehouse Product Stock Discrepancies',
                'ordering': ['session', 'discrepancy_type', 'warehouse_product__product__name'],
            },
        ),
        migrations.AddField(
            model_name='erpstockcheckitem',
            name='session',
            field=models.ForeignKey(help_text='The ERP stock check session this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.erpstockchecksession'),
        ),
        migrations.AddField(
            model_name='erpstockcheckitem',
            name='warehouse_product',
            field=models.ForeignKey(help_text='The Warehouse Product record in your system.', on_delete=django.db.models.deletion.PROTECT, to='warehouse.warehouseproduct'),
        ),
        migrations.AlterUniqueTogether(
            name='erpstockcheckitem',
            unique_together={('session', 'warehouse_product')},
        ),
    ]
